# # Java Maven CircleCI 2.0 configuration file
# #
# # Check https://circleci.com/docs/2.0/language-java/ for more details
# #
# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#       - image: circleci/openjdk:8-jdk
      
#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # - image: circleci/postgres:9.4

#     working_directory: ~/repo

#     environment:
#       # Customize the JVM maximum heap limit
#       MAVEN_OPTS: -Xmx3200m
    
#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#           - v1-dependencies-{{ checksum "pom.xml" }}
#           # fallback to using the latest cache if no exact match is found
#           - v1-dependencies-

#       - run: mvn dependency:go-offline

#       - save_cache:
#           paths:
#             - ~/.m2
#           key: v1-dependencies-{{ checksum "pom.xml" }}
        
#       # run tests!
#       - run: mvn integration-test


version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          key: circleci-challenge-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
           - ~/.m2
          key: circleci-challenge-{{ checksum "pom.xml" }}

#       - run:
#           name: Start SauceLabs Tunnel (required if testing on CircleCI container)
#           command: |
#             curl https://saucelabs.com/downloads/sc-4.4.12-linux.tar.gz -o saucelabs.tar.gz
#             tar -xzf saucelabs.tar.gz
#             cd sc-*
#             # startup saucelabs tunnel as background task (its a blocking command)
#             bin/sc -u ${SAUCELABS_USER} -k ${SAUCELABS_KEY} &
#             #wait for sauce tunnel up to 1 minute
#             wget --retry-connrefused --no-check-certificate -T 60 localhost:4445
      - run:
          name: Build and test
          command: |
            mvn package -B  #run your tests
# killall sc #kill saucelabs tunnel
      - run:
          name: Copy deployment artifacts to workspace
          command: |
            cp target/spring-petclinic-*.war /tmp/standalone-app.war
            cp .circleci/setup-heroku.sh /tmp/setup-heroku.sh
            cp src/main/resources/deployment/cf-dev-manifest.yml /tmp/
      - store_test_results:
          path: target/surefire-reports

      - store_artifacts:
          path: /tmp/standalone-app.war
      - store_artifacts:
          path: /tmp/cf-dev-manifest.yml

      - persist_to_workspace:
                root: /tmp
                paths:
                  - standalone-app.war
                  - setup-heroku.sh
                  - cf-dev-manifest.yml

  deploy-heroku:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/deploy
    steps:
      # why rebuild something we already tested, rebuilding invalidates any previous confidence?!
      - attach_workspace:
          at: /tmp

      - run:
          name: Run setup script
          command: bash /tmp/setup-heroku.sh

      - run:
          name: Heroku Deploy
          command: |
            cp /tmp/standalone-app.war .
            ls -la
            heroku plugins:install heroku-cli-deploy
            heroku plugins:install heroku-cli-deploy  # when debugging on circle image, first run succeeded, but did not make plugin available
            heroku deploy:war standalone-app.war --app spring-api-pet
#       - run:
#           name: Smoke Test
#           command: |
#             # Heroku deploy command will pass even if application crashes. Simple smoke test to make sure app is up.
#             HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://spring-api-pet.herokuapp.com`
#             if [ "$HTTPCODE" -ne 200 ];then
#               echo "heroku app not responding, failing deploy"
#               exit 1
#             fi
#   deploy-cf:
#     docker:
#       - image: eddiewebb/queue-circleci-openjdk:8-jdk-browsers
#       #- image: circleci/openjdk:8-jdk-browsers
#     working_directory: ~/deploy
#     steps:
#       # why rebuild something we already tested, rebuilding invalidates any previous confidence?!
#       - attach_workspace:
#           at: /tmp

#       - run: queueBuildUntilFrontOfLine 5 #do not run parallel deployments
#       - run:
#           name: Setup CF CLI
#           command: |
#             curl -v -L -o cf-cli_amd64.deb 'https://cli.run.pivotal.io/stable?release=debian64&source=github'
#             sudo dpkg -i cf-cli_amd64.deb
#             cf -v
#             cf api https://api.run.pivotal.io
#             cf auth $CF_USER $CF_PASSWORD
#             cf target -o eddies-org -s development
#       - run:
#           name: CF Deploy
#           command: |
#             # Copy deployable jar and CF Manifest to current dir
#             cp /tmp/standalone-app.jar .
#             cp /tmp/cf-dev-manifest.yml .
#             # Push as "dark" instance
#             cf push circleci-dark -f cf-dev-manifest.yml -p standalone-app.jar -n circleci-dark
#             # Verify new version is working on dark URL.
#             HTTPCODE=`curl -s -o /dev/null -w "%{http_code}" https://circleci-dark.cfapps.io/`
#             if [ "$HTTPCODE" -ne 200 ];then
#               echo "dark route note available, failing deploy"
#               exit 1
#             fi
#             # Send "real" url to new version
#             cf map-route circleci-dark cfapps.io -n circleci-challenge
#             # Stop sending traffic to previous version
#             cf unmap-route circleci-challenge cfapps.io -n circleci-challenge
#             # stop previous version
#             cf stop circleci-challenge
#             # delete previous version
#             cf delete circleci-challenge -f
#             # Switch name of "dark" version to claim correct name
#             cf rename circleci-dark circleci-challenge
workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - deploy-heroku:
          requires:
            - build
#       - deploy-cf:
#           requires:
#             - build
